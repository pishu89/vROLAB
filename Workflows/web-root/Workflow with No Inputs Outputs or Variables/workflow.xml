<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item1" object-name="workflow:name=generic" id="5b4e203d-3f22-4a20-b228-6927e81220a9" version="0.0.0" api-version="6.0.0" allowed-operations="vfe" editor-version="2.0" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Workflow with No Inputs Outputs or Variables]]></display-name>
  <description><![CDATA[This workflow does nothing except to provide the student with a pre-created workflow to which the student can add inputs, outputs, and variables.]]></description>
  <position y="40.0" x="60.0"/>
  <workflow-item name="item0" type="end" end-mode="0">
    <position y="40.0" x="580.0"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item2" type="task">
    <display-name><![CDATA[Schema element #1]]></display-name>
    <script encoded="false"><![CDATA[// The following variable is _not_ the same thing as the workflow variable
// that you created even though they have the exact same name.
//
// The following variable is local to this schema element. It has no
// relationship to any input, output, or variable anywhere else in the
// workflow.
var myVariable = "This is a local variable";

// The following "input" is not an input. It is a local variable. It is
// local to this schema element and has no relationship to any input, output,
// or variable anywhere else in the workflow.
var myInput = "This is also a local variable";

// The following "output" is not an output. It is a local variable. It is
// local to this schema element and has no relationship to any input, output,
// or variable anywhere else in the workflow.
var myOutput = "This is also a local variable";

// Omitting the "var" keyword makes no difference. The variables above would
// still be local variables.

// One easy way to determine that a variable in a schema element is a local
// variable is from the fact that the script editor has colored the variable
// name in black.

// Connecting a schema element's variables to workflow variables (or inputs or
// outputs) is done by performing "binding". This technique is described in
// more detail later in the course.]]></script>
    <in-binding/>
    <out-binding/>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="50.0" x="167.0"/>
  </workflow-item>
  <workflow-item name="item2" out-name="item3" type="task">
    <display-name><![CDATA[Schema element #2]]></display-name>
    <script encoded="false"><![CDATA[// The following variable is _not_ the same thing as the workflow variable
// that you created even though they have the exact same name.
//
// The following variable is local to this schema element. It has no
// relationship to any input, output, or variable anywhere else in the
// workflow.
var myVariable = "This is a local variable";

// The following "input" is not an input. It is a local variable. It is
// local to this schema element and has no relationship to any input, output,
// or variable anywhere else in the workflow.
var myInput = "This is also a local variable";

// The following "output" is not an output. It is a local variable. It is
// local to this schema element and has no relationship to any input, output,
// or variable anywhere else in the workflow.
var myOutput = "This is also a local variable";

// Omitting the "var" keyword makes no difference. The variables above would
// still be local variables.

// One easy way to determine that a variable in a schema element is a local
// variable is from the fact that the script editor has colored the variable
// name in black.

// Connecting a schema element's variables to workflow variables (or inputs or
// outputs) is done by performing "binding". This technique is described in
// more detail later in the course.]]></script>
    <in-binding/>
    <out-binding/>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="50.0" x="280.0"/>
  </workflow-item>
  <workflow-item name="item3" out-name="item0" type="task">
    <display-name><![CDATA[Schema element #3]]></display-name>
    <script encoded="false"><![CDATA[// The following variable is _not_ the same thing as the workflow variable
// that you created even though they have the exact same name.
//
// The following variable is local to this schema element. It has no
// relationship to any input, output, or variable anywhere else in the
// workflow.
var myVariable = "This is a local variable";

// The following "input" is not an input. It is a local variable. It is
// local to this schema element and has no relationship to any input, output,
// or variable anywhere else in the workflow.
var myInput = "This is also a local variable";

// The following "output" is not an output. It is a local variable. It is
// local to this schema element and has no relationship to any input, output,
// or variable anywhere else in the workflow.
var myOutput = "This is also a local variable";

// Omitting the "var" keyword makes no difference. The variables above would
// still be local variables.

// One easy way to determine that a variable in a schema element is a local
// variable is from the fact that the script editor has colored the variable
// name in black.

// Connecting a schema element's variables to workflow variables (or inputs or
// outputs) is done by performing "binding". This technique is described in
// more detail later in the course.]]></script>
    <in-binding/>
    <out-binding/>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="50.0" x="410.0"/>
  </workflow-item>
  <presentation/>
</workflow>