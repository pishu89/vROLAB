<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item1" object-name="workflow:name=generic" id="6f1118f6-8185-447d-a588-e00ace97642b" version="0.0.0" api-version="6.0.0" allowed-operations="vfe" editor-version="2.0" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Log vRA Event Topics]]></display-name>
  <description><![CDATA[to This workflow illustrates how to extract information from the payload that is sent from vRA Cloud Assembly to a vRealize Orchestrator workflow.]]></description>
  <position y="50.0" x="100.0"/>
  <workflow-item name="item0" type="end" end-mode="0">
    <position y="50.0" x="360.0"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item0" type="task">
    <display-name><![CDATA[Log vRA Event Topic]]></display-name>
    <script encoded="false"><![CDATA[/*
   vraEvents is an associative array which enables us to map a vRA event from its
   dotted notation (e.g. "compute.provision.post") to its friendly name (e.g.
   "Compute post provision").
*/
var vraEvents = {
    "blueprint.configuration":                  "Blueprint configuration",
    "blueprint.version.configuration":          "Blueprint version configuration",
    "compute.allocation.pre":                   "Compute allocation",
    "compute.provision.post":                   "Compute post provision",
    "compute.removal.post":                     "Compute post removal",
    "compute.provision.pre":                    "Compute provision",
    "compute.removal.pre":                      "Compute removal",
    "compute.reservation.pre":                  "Compute reservation",
    "deployment.action.post":                   "Deployment action completed",
    "deployment.action.pre":                    "Deployment action requested",
    "deployment.request.post":                  "Deployment completed",
    "relocation-service.deployment.onboarded":  "Deployment onboarded",
    "deployment.request.pre":                   "Deployment requested",
    "deployment.resource.action.post":          "Deployment resource action completed",
    "deployment.resource.action.pre":           "Deployment resource action requested",
    "deployment.resource.request.post":         "Deployment resource completed",
    "deployment.resource.request.pre":          "Deployment resource requested",
    "disk.allocation.pre":                      "Disk allocation",
    "disk.removal.post":                        "Disk.removal.post",
    "disk.resize.post":                         "Disk post resize",
    "broker.event.log":                         "EventLog",
    "kubernetes.cluster.allocation.pre":        "Kubernetes cluster allocation",
    "kubernetes.cluster.provision.post":        "Kubernetes cluster post provision",
    "kubernetes.cluster.removal.post":          "Kubernetes cluster post removal",
    "kubernetes.cluster.provision.pre":         "Kubernetes cluster provision",
    "kubernetes.cluster.removal.pre":           "Kubernetes cluster removal",
    "load.balancer.provision.post":             "Load balancer post provision",
    "network.configure":                        "Network Configure",
    "project-service.project.lifecycle":        "Project Lifecycle Event Topic",
}

// Find out the vRA event (in dotted notation).
var vraEvent = System.getContext().getParameter("__metadata_eventTopicId");

// Log both the friendly name (e.g. "Compute post provision") and the dotted notation
// (e.g. "compute.provision.post") of the vRA event.
System.log("vRA event name:   " + vraEvents[vraEvent]);
System.log("vRA event name (dotted): " + vraEvent);]]></script>
    <in-binding/>
    <out-binding/>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="60.0" x="190.0"/>
  </workflow-item>
  <presentation/>
</workflow>